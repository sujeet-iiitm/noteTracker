import React, { useState, useEffect } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { Plus, Edit, Trash2, Search, Calendar, X, Loader, Download, NotebookIcon } from 'lucide-react';
import axios from 'axios';
import { toast } from 'react-toastify';
import { useNavigate, useParams } from 'react-router-dom';
import ShareNoteCard from '../Layout/ShareNoteCard';
import jsPDF from 'jspdf';

interface Note {
  id: string;
  title: string;
  description: string;
  shortNote?: string;
  createdAt: string;
  updatedAt: string;
  userId: string;
}

const darkMode: boolean = localStorage.getItem('theme') === 'dark';

const Notes: React.FC = () => {
  const { logout } = useAuth();
  const navigate = useNavigate();
  const { subjectId } = useParams<{ subjectId: string }>();
  const [notes, setNotes] = useState<Note[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [editingNote, setEditingNote] = useState<Note | null>(null);
  const [deleteConfirmNote, setDeleteConfirmNote] = useState<Note | null>(null);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    shortNote: '',
  });

  const fetchNotes = async () => {
    try {
      setLoading(true);
      console.log(subjectId);
      const response = await axios.get(`http://localhost:3000/api/note/subject/${subjectId}/notes`, {
        withCredentials: true,
      });
      setNotes(Array.isArray(response.data.notes) ? response.data.notes : []);
      setLoading(false);
    } catch (error: any) {
      if (error.response?.status === 401) {
        toast.error('UnAuthenticated Request! Logging-Out');
        logout();
        navigate('/login');
      } else {
        toast.error('Error fetching notes');
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (subjectId) fetchNotes();
    // eslint-disable-next-line
  }, [subjectId]);

  const handleDownload = (note: Note | null) => {
    if (!note) return;
    const doc = new jsPDF();
    doc.setFont("helvetica", "bold");
    doc.setFontSize(20);
    doc.text(note.title, 105, 20, { align: "center" });
    doc.setLineWidth(0.5);
    doc.line(20, 25, 190, 25);
    let y = 40;
    if (note.shortNote) {
      doc.setFont("helvetica", "italic");
      doc.setFontSize(12);
      const shortNoteLines = doc.splitTextToSize(`"${note.shortNote}"`, 170);
      doc.text(shortNoteLines, 20, y);
      y += shortNoteLines.length * 7 + 10;
    }
    doc.setFont("helvetica", "bold");
    doc.setFontSize(14);
    doc.text("Description:", 20, y);
    y += 10;
    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    const descriptionLines = doc.splitTextToSize(note.description, 170);
    doc.text(descriptionLines, 20, y);
    y += descriptionLines.length * 7 + 15;
    doc.setFont("helvetica", "bold");
    doc.setFontSize(14);
    doc.text("Details:", 20, y);
    y += 10;
    doc.setFont("helvetica", "normal");
    doc.setFontSize(11);
    doc.text(`Created At: ${new Date(note.createdAt).toLocaleString()}`, 20, y);
    y += 7;
    doc.text(`Updated At: ${new Date(note.updatedAt).toLocaleString()}`, 20, y);
    y += 7;
    doc.setFont("helvetica", "italic");
    doc.setFontSize(10);
    doc.text("Generated by NotesTracker", 105, 285, { align: "center" });
    const safeTitle = note.title.replace(/[<>:"/\\|?*]+/g, "_");
    doc.save(`${safeTitle}.pdf`);
  };

  const filteredNotes = notes.filter(
    (note) =>
      note.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      note.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.title.trim() || !formData.description.trim()) {
      toast.error('Title and description are required');
      return;
    }
    setSubmitting(true);
    try {
      if (editingNote) {
        // edit note
        const response = await axios.put(
          `http://localhost:3000/api/note/updateNote/${subjectId}/${editingNote.id}`,
          {
            title: formData.title,
            description: formData.description,
            shortNote: formData.shortNote,
          },
          { withCredentials: true }
        );
        setNotes(
          notes.map((note) =>
            note.id === editingNote.id
              ? { ...note, ...formData, updatedAt: new Date().toISOString() }
              : note
          )
        );
        toast.success(response.data.message || 'Note updated successfully');
        setEditingNote(null);
      } else {
        // add note
        const response = await axios.post(
          `http://localhost:3000/api/note/createNote/${subjectId}`,
          {
            title: formData.title,
            description: formData.description,
            shortNote: formData.shortNote,
          },
          { withCredentials: true }
        );
        toast.success(response.data.message || 'Note created successfully');
        setIsAddDialogOpen(false);
        await fetchNotes();
      }
      setFormData({ title: '', description: '', shortNote: '' });
    } catch (error: any) {
      if (error.response?.status === 401) {
        toast.error('UnAuthenticated Request! Logging-Out');
        logout();
        navigate('/login');
      } else if (error.response?.status === 400) {
        toast.error(error.response.data.error || 'Invalid input');
      } else {
        toast.error('Error saving note. Try again.');
      }
    } finally {
      setSubmitting(false);
    }
  };

  const handleEdit = (note: Note) => {
    setEditingNote(note);
    setFormData({
      title: note.title,
      description: note.description,
      shortNote: note.shortNote || '',
    });
  };

  const handleDelete = async (noteId: string) => {
    try {
      const response = await axios.delete(
        `http://localhost:3000/api/note/deleteNote/${subjectId}/${noteId}`,
        { withCredentials: true }
      );
      setNotes(notes.filter((note) => note.id !== noteId));
      toast.success(response.data.message || 'Note deleted successfully');
      setDeleteConfirmNote(null);
    } catch (error: any) {
      if (error.response?.status === 401) {
        toast.error('UnAuthenticated Request! Logging-Out');
        logout();
        navigate('/login');
      } else {
        toast.error('Error deleting note. Try again.');
      }
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const closeAllModals = () => {
    setIsAddDialogOpen(false);
    setEditingNote(null);
    setDeleteConfirmNote(null);
    setFormData({ title: '', description: '', shortNote: '' });
  };

  const showEmptyState = !loading && notes.length === 0 && searchTerm.trim() === '';

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1>My Notes</h1>
          <p className="text-muted-foreground">Manage and organize your notes under this subject</p>
        </div>
        <button
          onClick={() => setIsAddDialogOpen(true)}
          className="bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90 transition-colors flex items-center space-x-2"
        >
          <Plus className="w-4 h-4" />
          <span>Add Note</span>
        </button>
      </div>
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4"/>
        <input
          placeholder="Search notes..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className={`w-full pl-10 pr-3 py-2
            ${darkMode
              ? 'bg-black text-white border-gray-600 placeholder-gray-400'
              : 'bg-white text-black border-gray-300 placeholder-gray-500'}
            border rounded-md focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent`}
        />
      </div>
      {loading && (
        <div className="p-6 flex items-center justify-center min-h-96">
          <div className="flex items-center space-x-2">
            <Loader className="w-6 h-6 animate-spin"/>
            <span>Loading notes...</span>
          </div>
        </div>
      )}
      {!loading && filteredNotes.length > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredNotes.map((note) => (
            <div key={note.id} className="group bg-card border border-border rounded-lg shadow-sm hover:shadow-md transition-shadow">
              <div className="p-6">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h3 className="line-clamp-2 mb-2">{note.title}</h3>
                    <div className="flex items-center text-muted-foreground mb-3">
                      <Calendar className="w-3 h-3 mr-1"/>
                      <span className="text-sm">{formatDate(note.createdAt)}</span>
                    </div>
                  </div>
                  <div className="flex space-x-1 opacity-100 md:opacity-0 md:group-hover:opacity-100 transition-opacity">
                    <ShareNoteCard note={note}/>
                    <button onClick={() => handleDownload(note)}
                      className="p-1 text-muted-foreground hover:text-destructive hover:bg-accent rounded transition-colors">
                      <Download className="w-4 h-4" />
                    </button>
                    <button onClick={() => handleEdit(note)}
                      className="p-1 text-muted-foreground hover:text-destructive hover:bg-accent rounded transition-colors">
                      <Edit className="w-4 h-4" />
                    </button>
                    <button onClick={() => setDeleteConfirmNote(note)}
                      className="p-1 text-muted-foreground hover:text-destructive hover:bg-accent rounded transition-colors">
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
                <p className="text-muted-foreground line-clamp-3 mb-3">{note.description}</p>
                {note.shortNote && (
                  <div className="bg-muted rounded-md p-2">
                    <p className="text-sm italic">{note.shortNote}</p>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
      {showEmptyState && (
        <div className="text-center py-12">
          <NotebookIcon className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
          <h3 className="text-lg font-medium mb-2">No notes found</h3>
          <p className="text-muted-foreground mb-4">
            Get started by creating your first note.
          </p>
          <button
            onClick={() => setIsAddDialogOpen(true)}
            className="bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90 transition-colors inline-flex items-center space-x-2"
          >
            <Plus className="w-4 h-4"/>
            <span>Add Your First Note</span>
          </button>
        </div>
      )}
      {!loading && !showEmptyState && filteredNotes.length === 0 && (
        <div className="text-center py-12">
          <div className="mx-auto h-12 w-12 text-muted-foreground mb-4">🔍</div>
          <h3 className="text-lg font-medium mb-2">No matching notes</h3>
          <p className="text-muted-foreground mb-4">
            Try adjusting your search terms.
          </p>
        </div>
      )}
      {(isAddDialogOpen || editingNote) && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <div className="bg-background border border-border rounded-lg shadow-lg w-full max-w-lg">
            <div className="p-6 border-b border-border">
              <div className="flex items-center justify-between">
                <div>
                  <h2>{editingNote ? 'Edit Note' : 'Add New Note'}</h2>
                  <p className="text-muted-foreground">
                    {editingNote
                      ? 'Make changes to your note here.'
                      : 'Create a new note to track your thoughts and ideas.'}
                  </p>
                </div>
                <button onClick={closeAllModals}
                  className="p-1 text-muted-foreground hover:text-foreground hover:bg-accent rounded transition-colors">
                  <X className="w-4 h-4"/>
                </button>
              </div>
            </div>
            <form onSubmit={handleSubmit} className="p-6">
              <div className="space-y-4">
                <div className="space-y-2">
                  <label htmlFor="title" className="block">
                    Title
                  </label>
                  <input
                    id="title"
                    value={formData.title}
                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                    placeholder="Enter note title"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent
                      ${darkMode
                        ? 'bg-black text-white border-gray-600 placeholder-gray-400'
                        : 'bg-white text-black border-gray-300 placeholder-gray-500'}
                    `}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <label htmlFor="description" className="block">
                    Description
                  </label>
                  <textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    placeholder="Enter detailed description"
                    rows={4}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent
                      ${darkMode
                        ? 'bg-black text-white border-gray-600 placeholder-gray-400'
                        : 'bg-white text-black border-gray-300 placeholder-gray-500'}
                    `}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <label htmlFor="shortNote" className="block">
                    Short Note (Optional)
                  </label>
                  <input
                    id="shortNote"
                    value={formData.shortNote}
                    onChange={(e) => setFormData({ ...formData, shortNote: e.target.value })}
                    placeholder="Brief summary or key point"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent
                      ${darkMode
                        ? 'bg-black text-white border-gray-600 placeholder-gray-400'
                        : 'bg-white text-black border-gray-300 placeholder-gray-500'}
                    `}
                  />
                </div>
              </div>
              <div className="flex justify-end space-x-3 mt-6">
                <button
                  type="button"
                  onClick={closeAllModals}
                  className="px-4 py-2 border border-border bg-background text-foreground rounded-md hover:bg-accent hover:text-accent-foreground transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={submitting}
                  className="px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
                >
                  {submitting ? (
                    <>
                      <Loader className="w-4 h-4 animate-spin"/>
                      <span>{editingNote ? 'Updating...' : 'Creating...'}</span>
                    </>
                  ) : (
                    <span>{editingNote ? 'Save Changes' : 'Add Note'}</span>
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
      {deleteConfirmNote && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <div className="bg-background border border-border rounded-lg shadow-lg w-full max-w-md">
            <div className="p-6">
              <h2 className="mb-2">Are you sure?</h2>
              <p className="text-muted-foreground mb-6">
                This action cannot be undone!.. This will permanently delete your note "
                {deleteConfirmNote.title}".
              </p>
              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => setDeleteConfirmNote(null)}
                  className="px-4 py-2 border border-border bg-background text-foreground rounded-md hover:bg-accent hover:text-accent-foreground transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={() => handleDelete(deleteConfirmNote.id)}
                  className="px-4 py-2 bg-destructive text-destructive-foreground rounded-md hover:bg-destructive/90 transition-colors"
                >
                  Delete
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Notes;
